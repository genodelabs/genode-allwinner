#
# Script to test modem on the PinePhone
#
# 1. Start and wait until modem becomes ready
# > [init -> modem] Power up modem ...
# > [init -> modem] 0s: status: off
# > [init -> modem] 1s: status: off
# > [init -> modem] 2s: status: off
# > [init -> modem] 3s: status: on
# >
# > RDY
#
# 2. Enter PIN
# ! AT+CPIN=1234
# > OK
#
# 3.1. Call someone (ATD<number>;)
# ! ATD0351123445;
#
# 3.2. Take call
# ! ATA
#
# 4. End call
# ! ATH
#
# 5. Shutdown modem before reset/poweroff
# ! AT+QPOWD
#
# 6. For the cdc_ether driver to work the modem has to be configured to use the ECM
# USB networking profile via AT commands (default is QMI/PPP)
# The current mode can be retrieved via:
# ! AT+QCFG="usbnet"
# > "usbnet",0 - is PPP & QMI (default)
# > "usbnet",1 - is ECM.
# > "usbnet",2 - is MBIM
#
# In case mode is not 1 enter:
# ! AT+QCFG="usbnet",1
# > OK
# Reboot modem
# ! AT+CFUN=1,1
# > OK
# On next start the modem should connect to the Internet which can be checked
# using:
# !AT+CGCONTRDP
# > +CGCONTRDP: 1,5,internet.provider.de,10.208.76.151,,62.109.121.17,62.109.121.18
#
# This operation has to be performed only once
#

# set to 0 to let the modem driver interact with the modem's AT interface
proc interactive_at_control { } { return 1 }

# set to 1 to establish network connectivity via the modem's usbnet interface
proc test_network_connectivity { } { return 0 }

# return SIM pin unless using 'interactive_at_control'
proc sim_pin { } {
	global ::env
	if {[info exists ::env(SIM_PIN)]} {
		return $::env(SIM_PIN) }

	puts stderr "Error: SIM_PIN is required as run-script argument"
	exit
}

# return number to call unless using 'interactive_at_control'
proc call_number { } {
	global ::env
	if {[info exists ::env(CALL_NUMBER)]} {
		return $::env(CALL_NUMBER) }

	return ""
}

build {
	core lib/ld init timer
	driver/uart/ns16550 driver/platform/a64 driver/pin/a64
	driver/modem/pinephone driver/audio_control/pinephone
	driver/usb_host/a64
	server/terminal_crosslink server/report_rom
	driver/usb_net
	server/nic_router
	app/ping
}

create_boot_directory


proc modem_config { } {

	set at_protocol_attr {at_protocol="no"}
	set sim_pin_attr     {}
	set call_node        {}

	if {![interactive_at_control]} {
		set at_protocol_attr {at_protocol="yes"}
		set sim_pin_attr     "pin=\"[sim_pin]\""
	}

	if {[call_number] != ""} {
		set call_node "<call number=\"[call_number]\"/>"
	}

	return "<config verbose=\"no\" power=\"on\" $at_protocol_attr $sim_pin_attr>
	          $call_node
	        </config>"
}


proc uart_log_start_node { } {

	if {![interactive_at_control]} { return "" }

	return {
		<start name="uart_log" ram="2M">
			<binary name="ns16550_uart"/>
			<config carriage_return="true"/>
			<route>
				<service name="Terminal"> <child name="terminal_crosslink"/> </service>
				<service name="Platform"> <child name="platform"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>
	}
}


proc network_related_start_nodes { } {

	if {![test_network_connectivity]} { return "" }

	return {
		<start name="usb_host" caps="200" ram="16M">
			<binary name="a64_usb_host"/>
			<provides> <service name="Usb"/> </provides>
			<config>
				<policy label_prefix="cdc_ether">
					<device vendor_id="0x2c7c" product_id="0x0125"/>
				</policy>
			</config>
			<route>
				<service name="Timer"> <child name="timer"/> </service>
				<service name="Platform"> <child name="platform"/> </service>
				<service name="ROM" label="dtb">
					<parent label="usb-pinephone.dtb"/> </service>

				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="cdc_ether" caps="200" ram="20M">
			<binary name="usb_net"/>
			<config mac="02:00:00:00:01:05" ld_verbose="yes"/>
			<route>
				<service name="Uplink"><child name="nic_router"/></service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>

		<start name="nic_router" caps="200" ram="10M">
			<provides>
				<service name="Nic"/>
				<service name="Uplink"/>
			</provides>
			<config verbose_domain_state="yes"
			 dhcp_discover_timeout_sec="10"
			 dhcp_request_timeout_sec="6">

				<policy label_prefix="ping"       domain="downlink"/>
				<policy label_prefix="cdc_ether"  domain="uplink"/>

				<domain name="uplink">

					<nat domain="downlink" tcp-ports="16384" icmp-ids="1000"/>
					<tcp-forward port="443" domain="downlink" to="10.0.3.2"/>
					<tcp-forward port="80"  domain="downlink" to="10.0.3.2"/>

				</domain>

				<domain name="downlink" interface="10.0.3.1/24">
					<dhcp-server ip_first="10.0.3.2" ip_last="10.0.3.2"/>
					<icmp dst="0.0.0.0/0" domain="uplink"/>
				</domain>

			</config>
		</start>

		<start name="ping" ram="8M">
			<config period_sec="5"
			        verbose="no"
			        count="100"
			        dst_ip="94.130.141.228" />
			<route>
				<service name="Nic"> <child name="nic_router"/> </service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>
	}
}


install_config {
	<config verbose="yes">
		<parent-provides>
			<service name="LOG"/>
			<service name="PD"/>
			<service name="CPU"/>
			<service name="RM"/>
			<service name="ROM"/>
			<service name="IO_MEM"/>
			<service name="IRQ"/>
			<service name="TRACE"/>
		</parent-provides>

		<default caps="100" ram="1M"/>
		<default-route>
			<any-service> <parent/> <any-child/> </any-service>
		</default-route>

		<start name="timer">
			<route> <any-service> <parent/> </any-service> </route>
			<provides> <service name="Timer"/> </provides>
		</start>

		<start name="report_rom">
			<provides> <service name="Report"/> <service name="ROM"/> </provides>
			<config verbose="yes"/>
		</start>

		<start name="platform" caps="200" ram="1M" managing_system="yes">
			<binary name="a64_platform"/>
			<provides> <service name="Platform"/> <service name="Scp"/> </provides>
			<config>
				<policy label="uart_log -> ">
					<device name="uart0"/>
				</policy>
				<policy label="uart_phone -> ">
					<device name="uart3"/>
				</policy>
				<policy label="a64_pio -> ">
					<device name="pio"/>
				</policy>
				<policy label="audio_control -> ">
					<device name="audio_codec"/>
					<device name="audio_analog"/>
					<device name="audio_codec_modem"/>
				</policy>
				<policy label="usb_host -> " info="yes">
					<device name="ehci1"/>
					<device name="usb_phy"/>
				</policy>
			</config>
			<route> <any-service> <parent/> </any-service> </route>
		</start>

		<start name="a64_pio">
			<provides>
				<service name="Pin_state"/>
				<service name="Pin_control"/>
				<service name="IRQ"/>
			</provides>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Platform"> <child name="platform"/> </service>
			</route>
			<config>

				<!-- modem -->
				<out name="4g-pwr-bat" bank="L" index="7" />
				<out name="dtr"        bank="B" index="2" />
				<out name="enable"     bank="H" index="8" />
				<out name="host-ready" bank="H" index="7" />
				<out name="pwrkey"     bank="B" index="3" />
				<out name="reset"      bank="C" index="4" />

				<in name="status"  bank="H" index="9" pull="up"/>
				<in name="ri"      bank="L" index="6"/>

				<policy label="modem -> battery"    pin="4g-pwr-bat"/>
				<policy label="modem -> dtr"        pin="dtr"/>
				<policy label="modem -> enable"     pin="enable"/>
				<policy label="modem -> host-ready" pin="host-ready"/>
				<policy label="modem -> pwrkey"     pin="pwrkey"/>
				<policy label="modem -> reset"      pin="reset"/>
				<policy label="modem -> ri"         pin="ri"/>
				<policy label="modem -> status"     pin="status"/>

				<!-- select uart3 -->
				<select name="modem-uart_tx"  bank="D" index="0" function="3"/>
				<select name="modem-uart_rx"  bank="D" index="1" function="3"/>

				<!-- AIF2 pins -->
				<select name="aif2-sync" bank="B" index="4" function="2"/>
				<select name="aif2-blk"  bank="B" index="5" function="2"/>
				<select name="aif2-dout" bank="B" index="6" function="2"/>
				<select name="aif2-din"  bank="B" index="7" function="2"/>

				<!-- speaker -->
				<out name="speaker-amp" bank="C" index="7" default="on"/>
			</config>
		</start>

		<start name="audio_control">
			<binary name="pinephone_audio_control"/>
			<config>
				<mic      volume="80"/>
				<earpiece volume="100"/>
				<speaker  volume="100"/>
				<codec    target="modem"/>
			</config>
			<route>
				<service name="Platform"> <child name="platform"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="modem">
			<binary name="pinephone_modem"/>
			} [modem_config] {
			<route>
				<service name="Timer">       <child name="timer"/>              </service>
				<service name="Report">      <child name="report_rom"/>         </service>
				<service name="Pin_control"> <child name="a64_pio"/>            </service>
				<service name="Pin_state">   <child name="a64_pio"/>            </service>
				<service name="Terminal">    <child name="terminal_crosslink"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="terminal_crosslink">
			<provides> <service name="Terminal"/> </provides>
		</start>

		<start name="uart_phone" ram="2M">
			<binary name="ns16550_uart"/>
			<route>
				<service name="Terminal"> <child name="terminal_crosslink"/> </service>
				<service name="Platform"> <child name="platform"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		} [uart_log_start_node] {
		} [network_related_start_nodes] {

	</config>
}

file copy [select_from_repositories board/[board]/devices] [run_dir]/genode/devices

build_boot_image [build_artifacts]

run_genode_until forever
